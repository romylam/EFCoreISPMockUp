// <auto-generated />
using System;
using ConsoleUI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConsoleUI.Migrations
{
    [DbContext(typeof(dbContext))]
    partial class dbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-preview.6.21352.1");

            modelBuilder.Entity("ConsoleUI.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Credit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Debit")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Transfer")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("ConsoleUI.Transact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Payee")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transacts");
                });

            modelBuilder.Entity("ConsoleUI.TransactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TransactId");

                    b.ToTable("TransactDetails");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TransactDetail");
                });

            modelBuilder.Entity("ConsoleUI.CreditAccount", b =>
                {
                    b.HasBaseType("ConsoleUI.Account");

                    b.Property<decimal>("Limit")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("CreditAccount");
                });

            modelBuilder.Entity("ConsoleUI.GeneralAccount", b =>
                {
                    b.HasBaseType("ConsoleUI.Account");

                    b.HasDiscriminator().HasValue("GeneralAccount");
                });

            modelBuilder.Entity("ConsoleUI.TradingAccount", b =>
                {
                    b.HasBaseType("ConsoleUI.Account");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("PriceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("TradingAccount");
                });

            modelBuilder.Entity("ConsoleUI.ForexTransactDetail", b =>
                {
                    b.HasBaseType("ConsoleUI.TransactDetail");

                    b.Property<decimal>("ForexAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("ForexCurrency")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ForexTransactDetail");
                });

            modelBuilder.Entity("ConsoleUI.GeneralTransactDetail", b =>
                {
                    b.HasBaseType("ConsoleUI.TransactDetail");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("GeneralTransactDetail");
                });

            modelBuilder.Entity("ConsoleUI.TradingTransactDetail", b =>
                {
                    b.HasBaseType("ConsoleUI.TransactDetail");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("PriceDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TradingAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TradingId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Unit")
                        .HasColumnType("TEXT");

                    b.HasIndex("TradingAccountId");

                    b.HasDiscriminator().HasValue("TradingTransactDetail");
                });

            modelBuilder.Entity("ConsoleUI.TransferTransactDetail", b =>
                {
                    b.HasBaseType("ConsoleUI.TransactDetail");

                    b.Property<int>("TransferId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("TransferId");

                    b.HasDiscriminator().HasValue("TransferTransactDetail");
                });

            modelBuilder.Entity("ConsoleUI.Transact", b =>
                {
                    b.HasOne("ConsoleUI.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ConsoleUI.TransactDetail", b =>
                {
                    b.HasOne("ConsoleUI.Transact", null)
                        .WithMany("TransactDetail")
                        .HasForeignKey("TransactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleUI.TradingTransactDetail", b =>
                {
                    b.HasOne("ConsoleUI.TradingAccount", "TradingAccount")
                        .WithMany()
                        .HasForeignKey("TradingAccountId");

                    b.Navigation("TradingAccount");
                });

            modelBuilder.Entity("ConsoleUI.TransferTransactDetail", b =>
                {
                    b.HasOne("ConsoleUI.Account", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("ConsoleUI.Transact", b =>
                {
                    b.Navigation("TransactDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
