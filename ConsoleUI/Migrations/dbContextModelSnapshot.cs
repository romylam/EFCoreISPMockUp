// <auto-generated />
using System;
using ConsoleUI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConsoleUI.Migrations
{
    [DbContext(typeof(dbContext))]
    partial class dbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-preview.6.21352.1");

            modelBuilder.Entity("ConsoleUI.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Credit")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Debit")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Default")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Transfer")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TypeId");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("ConsoleUI.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ConsoleUI.Currency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prefix")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("ConsoleUI.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ConsoleUI.MasterKey", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("NextKey")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NextTerm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefix")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactor")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MasterKeys");
                });

            modelBuilder.Entity("ConsoleUI.Payee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Payees");
                });

            modelBuilder.Entity("ConsoleUI.Subcategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("ConsoleUI.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ConsoleUI.Transact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("PayeeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reference")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PayeeId");

                    b.ToTable("Transacts");
                });

            modelBuilder.Entity("ConsoleUI.TransactDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TransactId");

                    b.ToTable("TransactDetails");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TransactDetail");
                });

            modelBuilder.Entity("ConsoleUI.TransactTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("TagId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("TransactId");

                    b.ToTable("TransactTags");
                });

            modelBuilder.Entity("ConsoleUI.Type", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("ConsoleUI.CreditAccount", b =>
                {
                    b.HasBaseType("ConsoleUI.Account");

                    b.Property<decimal>("Limit")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("CreditAccount");
                });

            modelBuilder.Entity("ConsoleUI.GeneralAccount", b =>
                {
                    b.HasBaseType("ConsoleUI.Account");

                    b.HasDiscriminator().HasValue("GeneralAccount");
                });

            modelBuilder.Entity("ConsoleUI.TradingAccount", b =>
                {
                    b.HasBaseType("ConsoleUI.Account");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("PriceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("TradingAccount");
                });

            modelBuilder.Entity("ConsoleUI.GeneralTransactDetail", b =>
                {
                    b.HasBaseType("ConsoleUI.TransactDetail");

                    b.Property<string>("CategoryId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("CategoryId");

                    b.Property<string>("SubcategoryId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("SubcategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubcategoryId");

                    b.HasDiscriminator().HasValue("GeneralTransactDetail");
                });

            modelBuilder.Entity("ConsoleUI.TransferTransactDetail", b =>
                {
                    b.HasBaseType("ConsoleUI.TransactDetail");

                    b.Property<string>("LinkId")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinkOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransferId")
                        .HasColumnType("TEXT");

                    b.HasIndex("LinkId");

                    b.HasIndex("TransferId");

                    b.HasDiscriminator().HasValue("TransferTransactDetail");
                });

            modelBuilder.Entity("ConsoleUI.CreditTransactDetail", b =>
                {
                    b.HasBaseType("ConsoleUI.GeneralTransactDetail");

                    b.HasDiscriminator().HasValue("CreditTransactDetail");
                });

            modelBuilder.Entity("ConsoleUI.ForexTransactDetail", b =>
                {
                    b.HasBaseType("ConsoleUI.TransferTransactDetail");

                    b.Property<decimal>("ForexAmount")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ForexTransactDetail");
                });

            modelBuilder.Entity("ConsoleUI.TradingFromTransactDetail", b =>
                {
                    b.HasBaseType("ConsoleUI.TransferTransactDetail");

                    b.Property<string>("CategoryId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("CategoryId");

                    b.Property<string>("SubcategoryId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("SubcategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubcategoryId");

                    b.HasDiscriminator().HasValue("TradingFromTransactDetail");
                });

            modelBuilder.Entity("ConsoleUI.TradingTransactDetail", b =>
                {
                    b.HasBaseType("ConsoleUI.TradingFromTransactDetail");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("TradingTransactDetail");
                });

            modelBuilder.Entity("ConsoleUI.Account", b =>
                {
                    b.HasOne("ConsoleUI.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("ConsoleUI.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("ConsoleUI.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Currency");

                    b.Navigation("Group");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ConsoleUI.Subcategory", b =>
                {
                    b.HasOne("ConsoleUI.Category", "Category")
                        .WithMany("Subcategory")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ConsoleUI.Transact", b =>
                {
                    b.HasOne("ConsoleUI.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("ConsoleUI.Payee", "Payee")
                        .WithMany()
                        .HasForeignKey("PayeeId");

                    b.Navigation("Account");

                    b.Navigation("Payee");
                });

            modelBuilder.Entity("ConsoleUI.TransactDetail", b =>
                {
                    b.HasOne("ConsoleUI.Transact", "Transact")
                        .WithMany("TransactDetail")
                        .HasForeignKey("TransactId");

                    b.Navigation("Transact");
                });

            modelBuilder.Entity("ConsoleUI.TransactTag", b =>
                {
                    b.HasOne("ConsoleUI.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.HasOne("ConsoleUI.Transact", "Transact")
                        .WithMany()
                        .HasForeignKey("TransactId");

                    b.Navigation("Tag");

                    b.Navigation("Transact");
                });

            modelBuilder.Entity("ConsoleUI.GeneralTransactDetail", b =>
                {
                    b.HasOne("ConsoleUI.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("ConsoleUI.Subcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("SubcategoryId");

                    b.Navigation("Category");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("ConsoleUI.TransferTransactDetail", b =>
                {
                    b.HasOne("ConsoleUI.Transact", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId");

                    b.HasOne("ConsoleUI.Account", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferId");

                    b.Navigation("Link");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("ConsoleUI.TradingFromTransactDetail", b =>
                {
                    b.HasOne("ConsoleUI.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("ConsoleUI.Subcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("SubcategoryId");

                    b.Navigation("Category");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("ConsoleUI.Category", b =>
                {
                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("ConsoleUI.Transact", b =>
                {
                    b.Navigation("TransactDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
